{"version":3,"sources":["ui/BreakSessionUi.js","components/Break.jsx","components/Session.jsx","components/TimeLeft.jsx","App.js","serviceWorker.js","index.js"],"names":["BreakSessionContainer","children","props","className","BreakSessionLabel","BreakSessionTime","PlusMinusButton","PlusMinusButtonContainer","Break","breakLength","decrementBreakLengthByOneMinute","incrementBreakLengthByOneMinute","breakLengthInMinutes","moment","duration","asMinutes","id","onClick","Session","sessionLength","decrementSessionLengthByOneMinute","incrementSessionLengthByOneMinute","sessionLengthInMinutes","momentDurationFormatSetup","TimeLeft","handleResetButtonClick","handleStartStopClick","startStopButtonLabel","timeLeft","timerLabel","formattedTimeLeft","format","trim","App","audioElement","useRef","useState","currentSessionType","setCurrentSessionType","intervalId","setIntervalId","setSessionLength","setBreakLength","setTimeLeft","useEffect","isStarted","newBreakLength","current","load","clearInterval","newIntervalId","setInterval","prevTimeLeft","newTimeLeft","play","newSessionLength","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.922c41d9.chunk.js","sourcesContent":["import React from 'react';\n\nexport const BreakSessionContainer = ({ children, ...props }) => {\n  return (\n    <div className=\"flex flex-col items-center\" {...props}>\n      {children}\n    </div>\n  );\n};\n\nexport const BreakSessionLabel = ({ children, ...props }) => {\n  return (\n    <p className=\"text-lg text-green-200\" {...props}>\n      {children}\n    </p>\n  );\n};\n\nexport const BreakSessionTime = ({ children, ...props }) => {\n  return (\n    <p className=\"text-4xl font-bold text-white\" {...props}>\n      {children}\n    </p>\n  );\n};\n\nexport const PlusMinusButton = ({ children, ...props }) => {\n  return (\n    <button {...props} className=\"mt-2 text-lg text-gray-800 px-4 py-2 bg-green-200 rounded\">\n      {children}\n    </button>\n  );\n};\n\nexport const PlusMinusButtonContainer = ({ children, ...props }) => {\n  return (\n    <div {...props} className=\"grid grid-flow-col gap-2 rounded\">\n      {children}\n    </div>\n  );\n};\n","import moment from 'moment';\nimport React from 'react';\nimport {\n  BreakSessionContainer,\n  BreakSessionLabel,\n  BreakSessionTime,\n  PlusMinusButtonContainer,\n  PlusMinusButton,\n} from '../ui/BreakSessionUi';\n\nconst Break = ({\n  breakLength,\n  decrementBreakLengthByOneMinute,\n  incrementBreakLengthByOneMinute,\n}) => {\n  const breakLengthInMinutes = moment.duration(breakLength, 's').asMinutes();\n  return (\n    <BreakSessionContainer>\n      <BreakSessionLabel id=\"break-label\">Break</BreakSessionLabel>\n      <BreakSessionTime id=\"break-length\">{breakLengthInMinutes}</BreakSessionTime>\n      <PlusMinusButtonContainer>\n        <PlusMinusButton id=\"break-decrement\" onClick={decrementBreakLengthByOneMinute}>\n          -\n        </PlusMinusButton>\n        <PlusMinusButton id=\"break-increment\" onClick={incrementBreakLengthByOneMinute}>\n          +\n        </PlusMinusButton>\n      </PlusMinusButtonContainer>\n    </BreakSessionContainer>\n  );\n};\n\nexport default Break;\n","import moment from 'moment';\nimport React from 'react';\nimport {\n  BreakSessionContainer,\n  BreakSessionLabel,\n  BreakSessionTime,\n  PlusMinusButtonContainer,\n  PlusMinusButton,\n} from '../ui/BreakSessionUi';\n\nconst Session = ({\n  sessionLength,\n  decrementSessionLengthByOneMinute,\n  incrementSessionLengthByOneMinute,\n}) => {\n  const sessionLengthInMinutes = moment.duration(sessionLength, 's').asMinutes();\n  return (\n    <BreakSessionContainer>\n      <BreakSessionLabel id=\"session-label\">Session</BreakSessionLabel>\n      <BreakSessionTime id=\"session-length\">{sessionLengthInMinutes}</BreakSessionTime>\n      <PlusMinusButtonContainer>\n        <PlusMinusButton id=\"session-decrement\" onClick={decrementSessionLengthByOneMinute}>\n          -\n        </PlusMinusButton>\n        <PlusMinusButton id=\"session-increment\" onClick={incrementSessionLengthByOneMinute}>\n          +\n        </PlusMinusButton>\n      </PlusMinusButtonContainer>\n    </BreakSessionContainer>\n  );\n};\n\nexport default Session;\n","import moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport React from 'react';\n\nmomentDurationFormatSetup(moment);\n\nconst TimeLeft = ({\n  handleResetButtonClick,\n  handleStartStopClick,\n  startStopButtonLabel,\n  timeLeft,\n  timerLabel,\n}) => {\n  const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss', { trim: false });\n  return (\n    <div className=\"flex flex-col justify-evenly items-center w-64 h-64 bg-red-600 rounded-full\">\n      <p className=\"text-red-900 text-2xl\" id=\"timer-label\">\n        {timerLabel}\n      </p>\n      <p className=\"font-clock text-4xl font-bold\" id=\"time-left\">\n        {formattedTimeLeft}\n      </p>\n      <button\n        className=\"text-red-400 font-semibold bg-green-900 px-4 py-2 rounded-lg\"\n        id=\"start_stop\"\n        onClick={handleStartStopClick}\n      >\n        {startStopButtonLabel}\n      </button>\n      <button\n        className=\"border-2 text-green-900 rounded-lg border-green-900 border-solid px-3 py-2\"\n        id=\"reset\"\n        onClick={handleResetButtonClick}\n      >\n        Reset\n      </button>\n    </div>\n  );\n};\n\nexport default TimeLeft;\n","import React, { useState, useEffect, useRef } from 'react';\nimport './assets/main.css';\nimport Break from './components/Break';\nimport Session from './components/Session';\nimport TimeLeft from './components/TimeLeft';\n\nfunction App() {\n  const audioElement = useRef(null);\n  const [currentSessionType, setCurrentSessionType] = useState('Session'); // 'Session' or 'Break'\n  const [intervalId, setIntervalId] = useState(null);\n  const [sessionLength, setSessionLength] = useState(60 * 25);\n  const [breakLength, setBreakLength] = useState(300);\n  const [timeLeft, setTimeLeft] = useState(sessionLength);\n\n  // change timeLeft whenever sessionLength changes\n  useEffect(() => {\n    setTimeLeft(sessionLength);\n  }, [sessionLength]);\n\n  const decrementBreakLengthByOneMinute = () => {\n    const newBreakLength = breakLength - 60;\n    if (newBreakLength > 0) {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  const incrementBreakLengthByOneMinute = () => {\n    const newBreakLength = breakLength + 60;\n    if (newBreakLength <= 60 * 60) {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  const decrementSessionLengthByOneMinute = () => {\n    const newSessionLength = sessionLength - 60;\n    if (newSessionLength > 0) {\n      setSessionLength(newSessionLength);\n    }\n  };\n\n  const incrementSessionLengthByOneMinute = () => {\n    const newSessionLength = sessionLength + 60;\n    if (newSessionLength <= 60 * 60) {\n      setSessionLength(sessionLength + 60);\n    }\n  };\n\n  const isStarted = intervalId !== null;\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      // if we are in started mode:\n      // we want to stop the timer\n      // clearInterval\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      // if we are in stopped mode:\n      // decrement timeLeft by one every second (1000 ms)\n      // to do this we'll use setInterval\n      const newIntervalId = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1;\n          if (newTimeLeft >= 0) {\n            return newTimeLeft;\n          }\n          // time left is less than zero\n          audioElement.current.play();\n          // if session:\n          if (currentSessionType === 'Session') {\n            // switch to break\n            setCurrentSessionType('Break');\n            // setTimeLeft to breakLength\n            return breakLength;\n          }\n          // if break:\n          else if (currentSessionType === 'Break') {\n            // switch to session\n            setCurrentSessionType('Session');\n            // setTimeLeft to sessionLength\n            return sessionLength;\n          }\n        });\n      }, 100); // TODO: turn back into 1000\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  const handleResetButtonClick = () => {\n    // reset audio\n    audioElement.current.load();\n    // clear the timeout interval\n    clearInterval(intervalId);\n    // set the intervalId null\n    setIntervalId(null);\n    // set the sessiontype to 'Session'\n    setCurrentSessionType('Session');\n    // reset the session length to 25 minutes\n    setSessionLength(60 * 25);\n    // reset the break length to 5 minutes\n    setBreakLength(60 * 5);\n    // reset the timer to 25 minutes (initial session length)\n    setTimeLeft(60 * 25);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen items-center justify-center bg-green-700\">\n      <div className=\"flex w-full justify-around\">\n        <Break\n          breakLength={breakLength}\n          decrementBreakLengthByOneMinute={decrementBreakLengthByOneMinute}\n          incrementBreakLengthByOneMinute={incrementBreakLengthByOneMinute}\n        />\n        <TimeLeft\n          handleResetButtonClick={handleResetButtonClick}\n          handleStartStopClick={handleStartStopClick}\n          timerLabel={currentSessionType}\n          startStopButtonLabel={isStarted ? 'Stop' : 'Start'}\n          timeLeft={timeLeft}\n        />\n        <Session\n          sessionLength={sessionLength}\n          decrementSessionLengthByOneMinute={decrementSessionLengthByOneMinute}\n          incrementSessionLengthByOneMinute={incrementSessionLengthByOneMinute}\n        />\n      </div>\n      <audio id=\"beep\" ref={audioElement}>\n        <source src=\"https://onlineclock.net/audio/options/default.mp3\" type=\"audio/mpeg\" />\n      </audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}